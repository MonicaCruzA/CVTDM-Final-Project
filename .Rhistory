plot(1:14, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
mydata <- Cereals.df.dum.norm
wss <- (nrow(mydata)-1)*sum(apply(mydata[,-c(1:2)],2,var))
wss
for (i in 1:14) wss[i] <- sum(kmeans(mydata[,-c(1:2)], centers=i)$withinss)
plot(1:14, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
mydata <- Cereals.df.dum.norm
wss <- (nrow(mydata)-1)*sum(apply(mydata[,-c(1:2)],2,var))
wss
for (i in 1:14) wss[i] <- sum(kmeans(mydata[,-c(1:2)], centers=i)$withinss)
plot(1:14, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
mydata <- Cereals.df.dum.norm
wss <- (nrow(mydata)-1)*sum(apply(mydata[,-c(1:2)],2,var))
wss
for (i in 1:14) wss[i] <- sum(kmeans(mydata[,-c(1:2)], centers=i)$withinss)
plot(1:14, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
mydata <- Cereals.df.dum.norm
wss <- (nrow(mydata)-1)*sum(apply(mydata[,-c(1:2)],2,var))
wss
for (i in 1:14) wss[i] <- sum(kmeans(mydata[,-c(1:2)], centers=i)$withinss)
plot(1:14, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
mydata <- Cereals.df.dum.norm
wss <- (nrow(mydata)-1)*sum(apply(mydata[,-c(1:2)],2,var))
wss
for (i in 1:14) wss[i] <- sum(kmeans(mydata[,-c(1:2)], centers=i)$withinss)
plot(1:14, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
mydata <- Cereals.df.dum.norm
wss <- (nrow(mydata)-1)*sum(apply(mydata[,-c(1:2)],2,var))
wss
for (i in 1:14) wss[i] <- sum(kmeans(mydata[,-c(1:2)], centers=i)$withinss)
plot(1:14, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
mydata <- Cereals.df.dum.norm
wss <- (nrow(mydata)-1)*sum(apply(mydata[,-c(1:2)],2,var))
wss
for (i in 1:14) wss[i] <- sum(kmeans(mydata[,-c(1:2)], centers=i)$withinss)
plot(1:14, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
mydata <- Cereals.df.dum.norm
wss <- (nrow(mydata)-1)*sum(apply(mydata[,-c(1:2)],2,var))
wss
for (i in 1:14) wss[i] <- sum(kmeans(mydata[,-c(1:2)], centers=i)$withinss)
plot(1:14, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
mydata <- Cereals.df.dum.norm
wss <- (nrow(mydata)-1)*sum(apply(mydata[,-c(1:2)],2,var))
wss
for (i in 1:14) wss[i] <- sum(kmeans(mydata[,-c(1:2)], centers=i)$withinss)
plot(1:14, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
mydata <- Cereals.df.dum.norm
wss <- (nrow(mydata)-1)*sum(apply(mydata[,-c(1:2)],2,var))
wss
for (i in 1:14) wss[i] <- sum(kmeans(mydata[,-c(1:2)], centers=i)$withinss)
plot(1:14, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
mydata <- Cereals.df.dum.norm
wss <- (nrow(mydata)-1)*sum(apply(mydata[,-c(1:2)],2,var))
wss
for (i in 1:14) wss[i] <- sum(kmeans(mydata[,-c(1:2)], centers=i)$withinss)
plot(1:14, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
mydata <- Cereals.df.dum.norm
wss <- (nrow(mydata)-1)*sum(apply(mydata[,-c(1:2)],2,var))
wss
for (i in 1:14) wss[i] <- sum(kmeans(mydata[,-c(1:2)], centers=i)$withinss)
plot(1:14, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
mydata <- Cereals.df.dum.norm
wss <- (nrow(mydata)-1)*sum(apply(mydata[,-c(1:2)],2,var))
wss
for (i in 1:14) wss[i] <- sum(kmeans(mydata[,-c(1:2)], centers=i)$withinss)
plot(1:14, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
mydata <- Cereals.df.dum.norm
wss <- (nrow(mydata)-1)*sum(apply(mydata[,-c(1:2)],2,var))
wss
for (i in 1:14) wss[i] <- sum(kmeans(mydata[,-c(1:2)], centers=i)$withinss)
plot(1:14, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
mydata <- Cereals.df.dum.norm
wss <- (nrow(mydata)-1)*sum(apply(mydata[,-c(1:2)],2,var))
wss
for (i in 1:14) wss[i] <- sum(kmeans(mydata[,-c(1:2)], centers=i)$withinss)
plot(1:14, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
mydata <- Cereals.df.dum.norm
wss <- (nrow(mydata)-1)*sum(apply(mydata[,-c(1:2)],2,var))
wss
for (i in 1:14) wss[i] <- sum(kmeans(mydata[,-c(1:2)], centers=i)$withinss)
plot(1:14, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
mydata <- Cereals.df.dum.norm
wss <- (nrow(mydata)-1)*sum(apply(mydata[,-c(1:2)],2,var))
wss
for (i in 1:14) wss[i] <- sum(kmeans(mydata[,-c(1:2)], centers=i)$withinss)
plot(1:14, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
mydata <- Cereals.df.dum.norm
wss <- (nrow(mydata)-1)*sum(apply(mydata[,-c(1:2)],2,var))
wss
for (i in 1:14) wss[i] <- sum(kmeans(mydata[,-c(1:2)], centers=i)$withinss)
plot(1:14, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
#Cutting the dendrogram into 6 clusters
#Single linkage
hclust6.single = cutree(hcluster.single, 6)
#Complete linkage
hclust6.complete = cutree(hcluster.complete, 6)
#Single linkage clustering
centroid.single = aggregate(Cereals.df.dum.norm, by = list(hclust6.single), FUN = mean)
#Complete linkage clustering
centroid.complete = aggregate(Cereals.df.dum.norm, by = list(hclust6.complete), FUN = mean)
centroid.single
centroid.complete
names(centroid.complete)[1] <- "Cluster"
#install.packages("profileR")
library(profileR) #for profile plot https://rdrr.io/cran/profileR/man/profileplot.html
profileplot(centroid.complete[,3:14], standardize = FALSE, interval = 10, by.pattern = TRUE, original.names = TRUE)
summary(hclust6.single)
?profileplot
profileplot(centroid.complete[,3:14], person.id = centroid.complete$Cluster, standardize = FALSE, interval = 10, by.pattern = TRUE, original.names = TRUE)
library(caret)
library(dummies)
library(leaps)
library(ggplot2)
library(forecast)
library(gplots)
library(FNN)
library(rpart)
library(rpart.plot)
library(dplyr)
rm(list = ls()) # clean environment
cat("\014") # clean console
setwd("C:\\Users\\lanhh\\OneDrive\\Documents\\UNIGE Statistics\\Masters of Biz Analytics\\Creating Value through Data Mining\\Fall 2021\\5. Final Project")
sales_train.df <- read.csv("sales_train.csv", header = T, sep = ",", na.strings=c("")) #importing data
sales_test.df <- read.csv("test.csv", header = T, sep = ",", na.strings=c(""))
items.df <- read.csv("items.csv", header = T, sep = ",", na.strings=c(""))
item_categories.df <- read.csv("item_categories.csv", header = T, sep = ",", na.strings=c(""))
shops.df <- read.csv("shops.csv", header = T, sep = ",", na.strings=c(""))
new_sales_train <- merge(sales_train.df, items.df, by = "item_id", all.x = TRUE)
#merge_item_shop <- merge(merge_item, shops.df, by = "shop_id", all.x = TRUE)
#merge_item_shop_itemcat <- merge(merge_item_shop, item_categories.df, by = "item_category_id", all.x = TRUE)
#drop the columns with item_id, shop_id and item_category_id
#drops <- c("item_id","shop_id", "item_category_id")
#sales_train_merged <- merge_item_shop_itemcat[ , !(names(merge_item_shop_itemcat) %in% drops)]
summary(new_sales_train)
#convert the date column from string to date format
new_sales_train$date <- as.Date(new_sales_train$date, "%d.%m.%Y")
library(tidyverse)
min(new_sales_train$date)
max(new_sales_train$date)
summary(new_sales_train)
new_sales_train <- new_sales_train[new_sales_train$item_price > 0, ]
#dropping some less useful features like item_name
new_sales_train$item_name <- NULL
aggregate(cbind(item_price,item_cnt_day) ~ date_block_num + shop_id + item_category_id + item_id, data = new_sales_train, FUN = mean, na.rm = TRUE)
agg2 <- aggregate(cbind(item_price,item_cnt_day) ~ date_block_num + shop_id + item_category_id + item_id, data = new_sales_train, FUN = sum, na.rm = TRUE)
agg2
data_group <- new_sales_train %>%                                 # Group data
group_by(date_block_num, shop_id, item_category_id, item_id) %>%
dplyr::summarize(date, sum_item_price = sum(item_price), mean_item_price = mean(item_price),
sum_item_cnt = sum(item_cnt_day), mean_item_cnt = mean(item_cnt_day), transaction = count(item_cnt_day)) %>%
as.data.frame()
data_group <- new_sales_train %>%                                 # Group data
group_by(date_block_num, shop_id, item_category_id, item_id) %>%
dplyr::summarize(date, sum_item_price = sum(item_price), mean_item_price = mean(item_price),
sum_item_cnt = sum(item_cnt_day), mean_item_cnt = mean(item_cnt_day)) %>%
as.data.frame()
data_group
data_group <- new_sales_train %>%                                 # Group data
group_by(date_block_num, shop_id, item_category_id, item_id) %>%
dplyr::summarize(sum_item_price = sum(item_price), mean_item_price = mean(item_price),
sum_item_cnt = sum(item_cnt_day), mean_item_cnt = mean(item_cnt_day)) %>%
as.data.frame()
data_group
new_sales_train <- new_sales_train %>% arrange(date, item_id)
data_group <- new_sales_train %>%                                 # Group data
group_by(date_block_num, shop_id, item_category_id, item_id) %>%
dplyr::summarize(sum_item_price = sum(item_price), mean_item_price = mean(item_price),
sum_item_cnt = sum(item_cnt_day), mean_item_cnt = mean(item_cnt_day)) %>%
as.data.frame()
data_group
View(data_group)
data_group <- new_sales_train %>%                                 # Group data
group_by(date_block_num, shop_id, item_category_id, item_id) %>%
dplyr::summarize(sum_item_price = sum(item_price), mean_item_price = mean(item_price),
sum_item_cnt = sum(item_cnt_day), mean_item_cnt = mean(item_cnt_day),  transaction = n(item_cnt_day)) %>%
as.data.frame()
data_group <- new_sales_train %>%                                 # Group data
group_by(date_block_num, shop_id, item_category_id, item_id) %>%
dplyr::summarize(sum_item_price = sum(item_price), mean_item_price = mean(item_price),
sum_item_cnt = sum(item_cnt_day), mean_item_cnt = mean(item_cnt_day),  transaction = n()) %>%
as.data.frame()
data_group
data_group <- new_sales_train %>%                                 # Group data
group_by(date_block_num, shop_id, item_category_id, item_id) %>%
dplyr::summarize(sum_item_price = sum(item_price), mean_item_price = mean(item_price),
transaction = n(item_cnt_day), sum_item_cnt = sum(item_cnt_day), mean_item_cnt = mean(item_cnt_day)) %>%
as.data.frame()
rlang::last_error()
data_group <- new_sales_train %>%                                 # Group data
group_by(date_block_num, shop_id, item_category_id, item_id) %>%
dplyr::summarize(sum_item_price = sum(item_price), mean_item_price = mean(item_price),
sum_item_cnt = sum(item_cnt_day), mean_item_cnt = mean(item_cnt_day), transaction = n(item_cnt_day) %>%
as.data.frame()
data_group
data_group <- new_sales_train %>%                                 # Group data
group_by(date_block_num, shop_id, item_category_id, item_id) %>%
dplyr::summarize(sum_item_price = sum(item_price), mean_item_price = mean(item_price),
transaction = n(), sum_item_cnt = sum(item_cnt_day), mean_item_cnt = mean(item_cnt_day)) %>%
as.data.frame()
data_group
data_group$year <- (data_group$date_block_num//12) + 2013)
data_group$year <- (data_group$date_block_num%/%12) + 2013)
data_group$year <- (data_group$date_block_num%/%12) + 2013
data_group$year <- (data_group$date_block_num%/%12) + 2013
data_group$month <- (data_group$date_block_num%%12) + 1
data_group$year <- (data_group$date_block_num%/%12) + 2013
data_group$month <- (data_group$date_block_num%%12) +
data_group$year <- (data_group$date_block_num%/%12) + 2013
data_group$month <- (data_group$date_block_num%%12)
View(data_group)
options(scipen = 999)
str(new_sales_train)
#adding the daily value of sales
new_sales_train$amount<-c(new_sales_train$item_price*new_sales_train$item_cnt_day)
#converting daily data into monthly
set.seed(1)
new_sales_train$month<-floor_date(new_sales_train$date, "month")
library(caret)
library(dummies)
library(leaps)
library(ggplot2)
library(forecast)
library(gplots)
library(FNN)
library(rpart)
library(rpart.plot)
library(dplyr)
library (plotly)
library(lubridate)
options(scipen = 999)
#converting daily data into monthly for the item counts (how many items sold per month)
set.seed(1)
new_sales_train$month<-floor_date(new_sales_train$date, "month")
monthly_items<-new_sales_train%>%
group_by(month) %>%
summarize(total.items = sum(item_cnt_day))
monthly_items_mean<-new_sales_train%>%
group_by(month) %>%
summarize(mean = mean(item_cnt_day))
monthly_items.sales<- data.frame(c(monthly_items, monthly_items_mean))
monthly_items.sales
#Plotting monthly items sold
data<-monthly_items
plot_monthly.items<-data %>%
ggplot( aes(x=month, y=total.items)) +
geom_area(fill="#69b3a7", alpha=0.5) +
geom_line(color="#69b3a3") +
ylab("total monthly items sold")
plot_monthly.items<-ggplotly(plot_monthly.items)
plot_monthly.items
#Plotting monthly mean of items sold
data<-monthly_items_mean
plot_monthly.items.mean<-data %>%
ggplot( aes(x=month, y=mean)) +
geom_area(fill="#69b3a7", alpha=0.5) +
geom_line(color="#69b3a3") +
ylab("mean monthly items sold")
plot_monthly.items.mean<-ggplotly(plot_monthly.items.mean)
plot_monthly.items.mean
View(monthly_items.sales)
options(scipen = 999)
str(new_sales_train)
#adding the daily value of sales
new_sales_train$amount<-c(new_sales_train$item_price*new_sales_train$item_cnt_day)
#converting daily data into monthly
set.seed(1)
new_sales_train$month<-floor_date(new_sales_train$date, "month")
monthly_mean<-new_sales_train%>%
group_by(month) %>%
summarize(mean = mean(amount))
monthly_dollars<-new_sales_train%>%
group_by(month) %>%
summarize(total.sales = sum(amount))
monthly_sales<- data.frame(c(monthly_dollars, monthly_mean))
monthly_sales
#Plotting monthly sales in dollars
data<-monthly_dollars
plot_sales<-data %>%
ggplot( aes(x=month, y=total.sales)) +
geom_area(fill="#69b3a2", alpha=0.5) +
geom_line(color="#69b3a2") +
ylab("monthly sales in dollars")
plot_sales<-ggplotly(plot_sales)
plot_sales
#Plotting monthly mean of sales
data<-monthly_mean
plot_meansales<-data %>%
ggplot( aes(x=month, y=mean)) +
geom_area(fill="#69b3a7", alpha=0.5) +
geom_line(color="#69b3a3") +
ylab("monthly mean of sales")
plot_meansales<-ggplotly(plot_meansales)
plot_meansales
monthly_sales.ts <- ts(monthly_sales$item_cnt_month, start = c(2013, 1), end = c(2015, 10), freq = 12)
library(caret)
library(dummies)
library(leaps)
library(ggplot2)
library(forecast)
library(gplots)
library(FNN)
library(rpart)
library(rpart.plot)
library(tidyverse)
library(dplyr)
library(lubridate)
library (plotly)
rm(list = ls()) # clean environment
cat("\014") # clean console
setwd("C:\\Users\\lanhh\\OneDrive\\Documents\\UNIGE Statistics\\Masters of Biz Analytics\\Creating Value through Data Mining\\Fall 2021\\5. Final Project")
sales_train.df <- read.csv("sales_train.csv", header = T, sep = ",", na.strings=c("")) #importing data
sales_test.df <- read.csv("test.csv", header = T, sep = ",", na.strings=c(""))
items.df <- read.csv("items.csv", header = T, sep = ",", na.strings=c(""))
item_categories.df <- read.csv("item_categories.csv", header = T, sep = ",", na.strings=c(""))
shops.df <- read.csv("shops.csv", header = T, sep = ",", na.strings=c(""))
#sales_test1.df <- sales_test.df %>%
#  mutate(ID = row_number())
#perhaps need to join the data first before we update the ID.
new_sales <- merge(sales_train.df, items.df, by = "item_id", all.x = TRUE)
#merge_item_shop <- merge(merge_item, shops.df, by = "shop_id", all.x = TRUE)
#merge_item_shop_itemcat <- merge(merge_item_shop, item_categories.df, by = "item_category_id", all.x = TRUE)
#drop the columns with item_id, shop_id and item_category_id
#drops <- c("item_id","shop_id", "item_category_id")
#sales_train_merged <- merge_item_shop_itemcat[ , !(names(merge_item_shop_itemcat) %in% drops)]
summary(new_sales)
#convert the date column from string to date format
new_sales$date <- as.Date(new_sales$date, "%d.%m.%Y")
min(new_sales$date)
max(new_sales$date)
summary(new_sales)
new_sales<- new_sales[new_sales$item_price > 0, ]
new_sales<- new_sales[new_sales$item_cnt_day > 0, ]
#dropping some less useful features like item_name
new_sales$item_name <- NULL
#reorder the data set by the order of date
new_sales <- new_sales %>% arrange(date, item_id)
summary(new_sales)
options(scipen = 999)
#converting daily data into monthly for the item counts (how many items sold per month)
set.seed(1)
new_sales$month <- floor_date(new_sales$date, "month")
monthly_sales <- new_sales%>%
group_by(month) %>%
summarize(item_cnt_month = sum(item_cnt_day))
monthly_sales_mean<-new_sales%>%
group_by(month) %>%
summarize(mean_item_cnt_month = mean(item_cnt_day))
summary(monthly_sales)
#boxplot of item_cnt_month
boxplot(monthly_sales$item_cnt_month,
main = "Monthly sales of all stores",
xlab = "Monthly sales (items)",
ylab = "",
col = "orange",
border = "brown",
horizontal = TRUE)
#create time series object using ts() per the book
monthly_sales.ts <- ts(monthly_sales$item_cnt_month, start = c(2013, 1), end = c(2015, 10), freq = 12)
monthly_sales.lm <- tslm(monthly_sales.ts ~trend + I(trend^2))
#plot the series
plot(monthly_sales.ts, xlab = "Time", ylab = "Sales Volume by month", ylim = c(63000, 190000))
lines(monthly_sales.lm$fitted.values, lwd = 2)
#data partition
nValid <- 8
nTrain <- length(monthly_sales.ts) - nValid
train.ts <- window(monthly_sales.ts, start = c(2013, 1), end = c(2013, nTrain))
valid.ts <- window(monthly_sales.ts, start = c(2013, nTrain+1), end = c(2013, nTrain + nValid))
naive.pred <- naive(train.ts, h = nValid)
snaive.pred <- snaive(train.ts, h = nValid)
plot(train.ts, ylim = c(63000, 290000), ylab = "Sales volume by month", xlab = "Time", bty = "l",
xaxt = "n", xlim = c(2013, 2015.9), main = "")
axis(1, at = seq(2013, 2015.9, 1), labels = format(seq(2013, 2015.9, 1)))
lines(naive.pred$mean, lwd = 2, col = "blue", lty = 1)
lines(snaive.pred$mean, lwd = 2, col = "blue", lty = 1)
lines(valid.ts, col = "grey20", lty = 3)
lines(c(2015.8 - 2, 2013.8 - 3), c(0, 20000))
lines(c(2015.8, 2015.8), c(0, 20000))
text(2013, 2015, "Training")
text(2015, 2015.8, "Validation")
text(2015.8, 2016, "Future")
arrows(2015 -2, 18000, 2013.25, 18000, code = 3, length = 0.1, lwd = 1,angle = 30)
arrows(2015.5 - 2, 18000, 2015.3, 18000, code = 3, length = 0.1, lwd = 1,angle = 30)
arrows(2015.5, 18000, 2006, 18000, code = 3, length = 0.1, lwd = 1, angle = 30)
accuracy(naive.pred, valid.ts)
accuracy(snaive.pred, valid.ts)
#create a new "Season" column for the data then turn it into dummies (s = 12 seasons so we create 11 dummies)
train.lm.season <- tslm(train.ts ~ season)
summary(train.lm.season)
train.lm.trend.season <- tslm(train.ts ~ trend + I(trend^2) + season)
summary(train.lm.trend.season)
accuracy(train.lm.season, valid.ts)
trend.season.pred <- predict(train.ts, h = nValid)
#accuracy(train.lm.season, valid.ts)
accuracy(train.lm.trend.season, valid.ts)
#accuracy(train.lm.season, valid.ts)
accuracy(trend.season.pred, valid.ts)
trend.season.pred <- predict(train.lm.trend.season, h = nValid)
trend.season.pred <- forecast(train.lm.trend.season, h = nValid)
#accuracy(train.lm.season, valid.ts)
accuracy(trend.season.pred, valid.ts)
season.pred <- forecast(train.lm.season, h = nValid)
trend.season.pred <- forecast(train.lm.trend.season, h = nValid)
accuracy(train.lm.season, valid.ts)
accuracy(season.pred, valid.ts)
accuracy(trend.season.pred, valid.ts)
View(monthly_sales)
#using stretch_tsibble to create many training sets
monthly_sales_train <- monthly_sales %>%
stretch_stibble (.init = 3, .step = 1) %>%
relocate(month, item_cnt_month, .id)
#using stretch_tsibble to create many training sets
monthly_sales_train <- monthly_sales %>%
stretch_tsibble (.init = 3, .step = 1) %>%
relocate(month, item_cnt_month, .id)
install.packages("tsibble")
#using stretch_tsibble to create many training sets
monthly_sales_train <- monthly_sales %>%
stretch_tsibble (.init = 3, .step = 1) %>%
relocate(month, item_cnt_month, .id)
library(tsibble)
#using stretch_tsibble to create many training sets
monthly_sales_train <- monthly_sales %>%
stretch_tsibble (.init = 3, .step = 1) %>%
relocate(month, item_cnt_month, .id)
View(monthly_sales)
#using stretch_tsibble to create many training sets
monthly_sales_train <- monthly_sales %>%
stretch_tsibble (.init = 3, .step = 1) %>%
monthly_sales_train
install.packages("fable")
library(tsibble)
#using stretch_tsibble to create many training sets
monthly_sales_train <- monthly_sales %>%
stretch_tsibble (.init = 3, .step = 1) %>%
monthly_sales_train
#using stretch_tsibble to create many training sets
monthly_sales_train <- monthly_sales %>%
stretch_tsibble (.init = 3, .step = 1) %>%
relocate(month, item_cnt_month, .id)
#using stretch_tsibble to create many training sets
monthly_sales_train <- monthly_sales %>%
stretch_tsibble (.init = 3, .step = 1)
monthly_sales_tsibble <- tsibble::as_tsibble(monthly_sales, index = "Dates", key = "Key")
monthly_sales_tsibble <- tsibble::as_tsibble(monthly_sales, index = "month", key = "item_cnt_month")
View(monthly_sales_tsibble)
#using stretch_tsibble to create many training sets
monthly_sales_train <- monthly_sales_tsibble %>%
stretch_tsibble (.init = 3, .step = 1)
#using stretch_tsibble to create many training sets
monthly_sales_train <- monthly_sales_tsibble %>%
stretch_tsibble (.init = 3, .step = 1)
harvest <- tsibble(
year = rep(2010:2012, 2),
fruit = rep(c("kiwi", "cherry"), each = 3),
kilo = sample(1:10, size = 6),
key = fruit, index = year
)
harvest <- tsibble(
year = rep(2010:2012, 2),
fruit = rep(c("kiwi", "cherry"), each = 3),
kilo = sample(1:10, size = 6),
key = fruit, index = year
)
harvest
library(fpp3)
install.packages("fpp3")
library(fpp3)
monthly_sales_train <- monthly_sales_tsibble %>%
select(item_cnt_month) %>%
stretch_tsibble(.init = 3, .step=1)
install.packages("fpp3")
library(fpp3)
monthly_sales_train <- monthly_sales_tsibble %>%
select(item_cnt_month) %>%
stretch_tsibble(.init = 1, .step=1)
#install.packages("fpp3")
#library(fpp3)
monthly_sales_train <- monthly_sales_tsibble %>%
select(item_cnt_month) %>%
stretch_tsibble(.init = 1, .step=1)
#using stretch_tsibble to create many training sets
monthly_sales_train <- monthly_sales_tsibble %>%
stretch_tsibble (.init = 3, .step = 1) %>%
relocate(month, item_cnt_month, .id)
#using stretch_tsibble to create many training sets
monthly_sales_train <- monthly_sales.ts %>%
stretch_tsibble (.init = 3, .step = 1) %>%
relocate(month, item_cnt_month, .id)
library(tsfknn)
install.packages("tsfknn")
library(tsfknn)
knn_pred <- knn_forecasting(monthly_sales.ts, h = 6, lags = 1:12,k=3)
autoplot(knn_pred, highlight = "neighbors",faceting = TRUE)
